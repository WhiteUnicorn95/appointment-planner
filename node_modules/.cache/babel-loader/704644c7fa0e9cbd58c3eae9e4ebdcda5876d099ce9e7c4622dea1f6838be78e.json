{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\laura\\\\Documents\\\\dev\\\\Codecademy\\\\appointment-planner-starting-v18\\\\src\\\\containers\\\\contactsPage\\\\ContactsPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { ContactForm } from \"../../components/contactForm/ContactForm\";\nimport { TileList } from \"../../components/tileList/TileList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ContactsPage = _ref => {\n  _s();\n  let {\n    contacts,\n    addContact\n  } = _ref;\n  /*\r\n  Define state variables for \r\n  contact info and duplicate check\r\n  */\n  const [name, setName] = useState('');\n  const [phone, setPhone] = useState('');\n  const [email, setEmail] = useState('');\n  const [isDuplicate, setIsDuplicate] = useState(false);\n  const handleSubmit = e => {\n    e.preventDefault();\n    /*\r\n    Add contact info and clear data\r\n    if the contact name is not a duplicate\r\n    */\n    if (!isDuplicate) {\n      addContact(name, phone, email);\n      setName('');\n      setPhone('');\n      setEmail('');\n    }\n    ;\n  };\n\n  /*\r\n  Using hooks, check for contact name in the \r\n  contacts array variable in props\r\n  */\n  useEffect(() => {\n    if (contacts.some(contact => contact.name === name)) {\n      setIsDuplicate(true);\n      console.log('The name is a duplicate');\n    }\n  }, [name, contacts]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Add Contact\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ContactForm, {\n        handleSubmit: handleSubmit,\n        name: name,\n        setName: setName,\n        email: email,\n        phone: phone\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Contacts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n_s(ContactsPage, \"RdI3LyrKuvO9Gqn84BBEmFcaw4Y=\");\n_c = ContactsPage;\nvar _c;\n$RefreshReg$(_c, \"ContactsPage\");","map":{"version":3,"names":["React","useState","useEffect","ContactForm","TileList","jsxDEV","_jsxDEV","ContactsPage","_ref","_s","contacts","addContact","name","setName","phone","setPhone","email","setEmail","isDuplicate","setIsDuplicate","handleSubmit","e","preventDefault","some","contact","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/laura/Documents/dev/Codecademy/appointment-planner-starting-v18/src/containers/contactsPage/ContactsPage.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nimport { ContactForm } from \"../../components/contactForm/ContactForm\";\r\nimport { TileList } from \"../../components/tileList/TileList\";\r\n\r\nexport const ContactsPage = ( {contacts, addContact} ) => {\r\n  /*\r\n  Define state variables for \r\n  contact info and duplicate check\r\n  */\r\n  const [name, setName] = useState('');\r\n  const [phone, setPhone] = useState('');\r\n  const [email, setEmail] = useState('');\r\n  const [isDuplicate, setIsDuplicate] = useState(false);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    /*\r\n    Add contact info and clear data\r\n    if the contact name is not a duplicate\r\n    */\r\n   if (!isDuplicate) {\r\n    addContact(name, phone, email);\r\n    setName('');\r\n    setPhone('');\r\n    setEmail('');\r\n   };\r\n\r\n  };\r\n\r\n  /*\r\n  Using hooks, check for contact name in the \r\n  contacts array variable in props\r\n  */\r\n  useEffect(() => {\r\n    if (contacts.some(contact => contact.name === name)) {\r\n      setIsDuplicate(true);\r\n      console.log('The name is a duplicate');\r\n    }\r\n  }, [name, contacts]);\r\n\r\n  return (\r\n    <div>\r\n      <section>\r\n        <h2>Add Contact</h2>\r\n        <ContactForm handleSubmit={handleSubmit} name={name} setName={setName} email={email} phone={phone} /> \r\n      </section>\r\n      <hr />\r\n      <section>\r\n        <h2>Contacts</h2>\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAElD,SAASC,WAAW,QAAQ,0CAA0C;AACtE,SAASC,QAAQ,QAAQ,oCAAoC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9D,OAAO,MAAMC,YAAY,GAAGC,IAAA,IAA8B;EAAAC,EAAA;EAAA,IAA5B;IAACC,QAAQ;IAAEC;EAAU,CAAC,GAAAH,IAAA;EAClD;AACF;AACA;AACA;EACE,MAAM,CAACI,IAAI,EAAEC,OAAO,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACa,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACe,KAAK,EAAEC,QAAQ,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACiB,WAAW,EAAEC,cAAc,CAAC,GAAGlB,QAAQ,CAAC,KAAK,CAAC;EAErD,MAAMmB,YAAY,GAAIC,CAAC,IAAK;IAC1BA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClB;AACJ;AACA;AACA;IACG,IAAI,CAACJ,WAAW,EAAE;MACjBP,UAAU,CAACC,IAAI,EAAEE,KAAK,EAAEE,KAAK,CAAC;MAC9BH,OAAO,CAAC,EAAE,CAAC;MACXE,QAAQ,CAAC,EAAE,CAAC;MACZE,QAAQ,CAAC,EAAE,CAAC;IACb;IAAC;EAEF,CAAC;;EAED;AACF;AACA;AACA;EACEf,SAAS,CAAC,MAAM;IACd,IAAIQ,QAAQ,CAACa,IAAI,CAACC,OAAO,IAAIA,OAAO,CAACZ,IAAI,KAAKA,IAAI,CAAC,EAAE;MACnDO,cAAc,CAAC,IAAI,CAAC;MACpBM,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;IACxC;EACF,CAAC,EAAE,CAACd,IAAI,EAAEF,QAAQ,CAAC,CAAC;EAEpB,oBACEJ,OAAA;IAAAqB,QAAA,gBACErB,OAAA;MAAAqB,QAAA,gBACErB,OAAA;QAAAqB,QAAA,EAAI;MAAW;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACpBzB,OAAA,CAACH,WAAW;QAACiB,YAAY,EAAEA,YAAa;QAACR,IAAI,EAAEA,IAAK;QAACC,OAAO,EAAEA,OAAQ;QAACG,KAAK,EAAEA,KAAM;QAACF,KAAK,EAAEA;MAAM;QAAAc,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9F,CAAC,eACVzB,OAAA;MAAAsB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACNzB,OAAA;MAAAqB,QAAA,eACErB,OAAA;QAAAqB,QAAA,EAAI;MAAQ;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACV,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACP,CAAC;AAEV,CAAC;AAACtB,EAAA,CAhDWF,YAAY;AAAAyB,EAAA,GAAZzB,YAAY;AAAA,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}